# 3. Создайте собственный класс-исключение,
# который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта,
# введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем,
# что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class Value(Exception):
    def __init__(self, txt):
        self.txt = txt


try:
    my_list = []
    while True:
        n = input('Enter number: ')
        if n == 'stop':
            print(my_list)
            break
        if n.isdigit() == False:
            answer = input(f'Wanna enter numbers further? \nEnter "yes" or "no" : ')
            if answer == 'yes':
                continue
            if answer == 'no':
                print(f'Your list:\n{my_list}')
                break
            raise Value('You Entered no answer!')
        my_list.append(n)
        print(my_list)
except Value as err:
    print(err)
finally:
    print('End')
